// <auto-generated />
using System;
using ReportCommander.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ReportCommander.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221005165509_initial migration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ReportCommander.Core.Entities.AuditRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AuditRecord");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommandTimeout")
                        .HasColumnType("int");

                    b.Property<int>("DatabaseConnectionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterList")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ReportOwnerUserID")
                        .HasColumnType("int");

                    b.Property<bool>("SkipWhenEmpty")
                        .HasColumnType("bit");

                    b.Property<string>("StoredProcedureName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("XtraReport")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseConnectionId");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ConfigDepartmentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ConfigDepartmentAssignments");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ConfigUserAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ConfigUserAssignments");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.DatabaseConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseServer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SqlUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseConnections");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlankReportEmailRecipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Delimiter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAttachmentMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailBodyRowCountLimit")
                        .HasColumnType("int");

                    b.Property<bool>("EmailDelimitedFile")
                        .HasColumnType("bit");

                    b.Property<string>("EmailDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailExcelFile")
                        .HasColumnType("bit");

                    b.Property<string>("EmailTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailXtraReport")
                        .HasColumnType("bit");

                    b.Property<string>("FTPDestinationFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTPHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTPPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTPUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FreezeTopRow")
                        .HasColumnType("bit");

                    b.Property<bool>("HighPriority")
                        .HasColumnType("bit");

                    b.Property<string>("MailHost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientEmailAddressList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RenderInBody")
                        .HasColumnType("bit");

                    b.Property<string>("RowColorList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSHFingerprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SaveDelimitedFile")
                        .HasColumnType("bit");

                    b.Property<bool>("SaveExcelFile")
                        .HasColumnType("bit");

                    b.Property<bool>("SaveXtraReport")
                        .HasColumnType("bit");

                    b.Property<bool>("SecureFTP")
                        .HasColumnType("bit");

                    b.Property<bool>("SendFTP")
                        .HasColumnType("bit");

                    b.Property<string>("SenderEmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowHeaders")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XtraReportParameters")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.DeliveryConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("DeliveryConfigs");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.DeliveryEmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<int>("EmailRecipientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("EmailRecipientId");

                    b.ToTable("DeliveryEmailRecipients");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.EmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDistributionGroup")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailRecipients");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ExecutionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QueueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueueId");

                    b.ToTable("ExecutionHistory");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.OutputHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpRemoteDirectory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FtpUsername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCSV")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFTP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPDF")
                        .HasColumnType("bit");

                    b.Property<string>("OutputFolder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExecutionHistoryId");

                    b.ToTable("OutputHistory");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ParameterQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValueField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.ToTable("ParameterQueries");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Queue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ProcessDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<string>("DynamicDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastExecutionTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RunOnFriday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnMonday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnSaturday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnSunday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnThursday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnTuesday")
                        .HasColumnType("bit");

                    b.Property<bool>("RunOnWednesday")
                        .HasColumnType("bit");

                    b.Property<string>("ScheduleTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.UserDepartmentAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserDepartmentAssignments");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("DarkModeEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Config", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.DatabaseConnection", "DatabaseConnection")
                        .WithMany()
                        .HasForeignKey("DatabaseConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DatabaseConnection");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ConfigDepartmentAssignment", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Config", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportCommander.Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ConfigUserAssignment", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Config", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportCommander.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.DeliveryConfig", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Config", "Config")
                        .WithMany("DeliveryConfigs")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportCommander.Core.Entities.Delivery", "Delivery")
                        .WithMany("DeliveryConfigs")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.DeliveryEmailRecipient", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportCommander.Core.Entities.EmailRecipient", "EmailRecipient")
                        .WithMany()
                        .HasForeignKey("EmailRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("EmailRecipient");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ExecutionHistory", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Queue", "Queue")
                        .WithMany()
                        .HasForeignKey("QueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Queue");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.OutputHistory", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.ExecutionHistory", "ExecutionHistory")
                        .WithMany()
                        .HasForeignKey("ExecutionHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecutionHistory");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.ParameterQuery", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Config", "Config")
                        .WithMany("ParameterQueries")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Queue", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Schedule", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Delivery", "Delivery")
                        .WithMany("Schedules")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.UserDepartmentAssignment", b =>
                {
                    b.HasOne("ReportCommander.Core.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReportCommander.Core.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Config", b =>
                {
                    b.Navigation("DeliveryConfigs");

                    b.Navigation("ParameterQueries");
                });

            modelBuilder.Entity("ReportCommander.Core.Entities.Delivery", b =>
                {
                    b.Navigation("DeliveryConfigs");

                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
